// @deno-types="npm:@types/deno"

// --- Basic Analysis Types (from your existing code, slightly organized) ---
export interface WordFrequency {
  word: string;
  count: number;
}

export interface BasicAnalysisResult {
  totalConversations: number;
  totalMessages: number;
  userMessagesCount: number;
  aiMessagesCount: number;
  totalUserCharacters: number;
  totalAiCharacters: number;
  averageUserMessageLength: number;
  averageAiMessageLength: number;
  firstMessageDate: string | null;
  lastMessageDate: string | null;
  conversationDaysSpan: number | null;
  mostUsedUserWords: WordFrequency[];
  userVocabularySizeEstimate: number; // Based on unique words from basic analysis
  averageWordsPerUserSentence: number;
  userToAiMessageRatio: number;
  averageMessagesPerConversation: number;
  longestConversationByMessages: { id?: string; title?: string; count: number } | null;
  shortestConversationByMessages: { id?: string; title?: string; count: number } | null;
  activityByHourOfDay: Array<{ hour: string; messageCount: number }>;
  activityByDayOfWeek: Array<{ day: string; messageCount: number }>;
  mostActiveHour: string | null;
  mostActiveDay: string | null;
  conversationTitles: string[];
  questionMarksUsedByUser: number;
  exclamationMarksUsedByUser: number;
}

// --- LLM Related Types ---

// Represents structured data extracted from a SINGLE conversation by a fast LLM (Stage 1)
export interface PerConversationInsights {
  conversationId: string; // Or a unique identifier for the conversation
  rawConversationText?: string; // Optional: if needed for Stage 2 context, but be mindful of size

  // For FBI Report & General Persona
  primaryTopics: string[]; // e.g., ["Career Planning", "Travel to Japan"]
  communicationPatterns: string[]; // e.g., ["SeekingInformation", "ProblemSolving"]
  sentimentPolarity: "positive" | "negative" | "neutral" | "mixed";
  complexityScore: number; // 1-10
  piiCategoriesMentioned: string[]; // CATEGORIES ONLY, e.g., ["Location", "Financial_Account"]

  // For Linguistic Fingerprint
  standoutVocabulary: string[]; // Unique or sophisticated words
  // complexityScore is reused from above

  // For "Top Revealing Conversations" (if you re-add it)
  uniquenessScore?: number; // 1-10
  conversationSummary?: string; // 1-2 sentence summary by fast LLM

  // For "My Reality TV Persona" (if you re-add it)
  // communicationPatterns and sentimentPolarity are reused

  // For "The Unfiltered Mirror" (if you re-add it)
  // identifiedSituationsOrInterests?: string[]; // Anonymized, non-accusatory phrases
}

// --- Premium Report Types (Generated by Powerful LLM - Stage 2) ---

export interface FBIReportData {
  reportTitle: string;
  subjectProfileSummary: string;
  dominantInterests: string[];
  communicationModalities: string[];
  emotionalToneAndEngagement: string;
  informationSharingTendencies: string; // Based on PII *categories*
  overallInteractionStyle: string;
  disclaimer: string;
}

export interface LinguisticFingerprintData {
  reportTitle: string;
  overallStyleDescription: string; // e.g., "Analytical and Inquisitive"
  vocabularyProfile: {
    qualitativeAssessment: string; // e.g., "Uses a rich and varied vocabulary"
    notableWords: string[]; // Sample of standout words from aggregation
    estimatedLexicalDiversity?: string; // e.g., "Above Average" (derived from TTR or LLM)
  };
  sentenceStructure: string; // e.g., "Prefers complex sentences but can be direct"
  expressiveness: string; // e.g., "Primarily formal, with occasional informal bursts"
  potentialInterestsIndicatedByLanguage: string[];
  disclaimer: string;
}

// ... (Add other report data interfaces as you build them out)
// export interface RealityTVPersonaData { ... }
// export interface CognitiveBlueprintData { ... }

// Main container for all paid insights
export interface AdvancedAnalysisResult {
  fbiReport?: FBIReportData;
  linguisticFingerprint?: LinguisticFingerprintData;
  // realityTVPersona?: RealityTVPersonaData;
  // cognitiveBlueprint?: CognitiveBlueprintData;
  // topRevealingConversations?: Array<{ conversationId: string; justification: string; summary?: string }>;
  // unfilteredMirror?: { intriguingObservation: string };
  // PII related reports would go here too if you add them
  processingErrors?: string[]; // To capture any issues during premium analysis
}

// --- Job & UserReport Types (from your existing code) ---
export interface Job {
  id: string;
  user_id: string;
  status: string;
  progress: number;
  file_path: string;
  analysis_type?: string;
  premium_features_enabled?: boolean;
  total_conversations?: number;
  processed_conversations?: number;
  error_message?: string; // For job-level errors
}

export interface UserReport {
  user_id: string;
  job_id: string;
  free_insights: BasicAnalysisResult;
  paid_insights: AdvancedAnalysisResult | null;
  analysis_type: string;
  created_at?: string; // Good to have
  updated_at?: string; // Good to have
}

// Representing a single conversation from the parsed JSON file
// This is a common structure, adapt if your input format differs
export interface RawConversation {
  id: string; // Or some unique identifier
  title?: string;
  create_time?: number; // Unix timestamp (seconds)
  created_at?: string; // ISO string
  mapping?: { [messageId: string]: RawMessageContainer }; // OpenAI export style
  messages?: RawMessageContainer[]; // Alternative structure
  // Add any other top-level conversation fields you might have
}

export interface RawMessageContainer {
  id?: string;
  message?: RawMessage;
  // If messages are not nested, message fields might be directly here
  author_role?: 'user' | 'assistant' | 'system' | 'tool';
  content_parts?: string[];
  create_time?: number;
}

export interface RawMessage {
  id?: string;
  author: { role: 'user' | 'assistant' | 'system' | 'tool'; name?: string; metadata?: any };
  content: { content_type: string; parts: string[] | any[] }; // parts can be complex
  create_time?: number; // Unix timestamp
  // ... other message fields
}